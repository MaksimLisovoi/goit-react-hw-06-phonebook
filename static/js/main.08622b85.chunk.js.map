{"version":3,"sources":["components/ContactsForm/ContactsForm.module.css","components/ContactList/ContactList.module.css","redux/contacts/contacts-action.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactsForm/ContactsForm.js","components/ContactList/ContactList.js","components/ContactList/ContactList.container.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","axios","defaults","baseURL","addContact","name","number","dispatch","a","actions","contact","post","data","deleteContact","contactId","delete","fetchContacts","get","getFilter","state","contacts","filter","getAllContacts","getLoading","loading","getVisibleContacts","createSelector","toLowerCase","includes","ContactsForm","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","some","alert","reset","onSubmit","this","className","s","contactsForm","htmlFor","shortid","generate","formLabel","id","type","onChange","Component","mapDispatchToProps","contactsOperations","connect","contactsSelectors","ContactList","onDeleteContact","map","contactItem","onClick","isLoadingContacts","Filter","defaultProps","contactsAction","changeFilter","target","App","createReducer","_","payload","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08622b85.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsForm\":\"ContactsForm_contactsForm__3j7sZ\",\"formLabel\":\"ContactsForm_formLabel__3ua_W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"ContactList_contactItem__3YkaW\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst fetchContactsRequest = createAction(\"contacts/addContactRequest\");\r\nconst fetchContactsSuccess = createAction(\"contacts/addContactSuccess\");\r\nconst fetchContactsError = createAction(\"contacts/addContactError\");\r\n\r\nconst addContactRequest = createAction(\"contacts/addContactRequest\");\r\nconst addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nconst addContactError = createAction(\"contacts/addContactError\");\r\n\r\nconst deleteContactRequest = createAction(\"contacts/deleteContactRequest\");\r\nconst deleteContactSuccess = createAction(\"contacts/deleteContactSuccess\");\r\nconst deleteContactError = createAction(\"contacts/deleteContactError\");\r\n\r\nexport const changeFilter = createAction(\"contact/changeFilter\");\r\n\r\nexport default {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n \r\n};\r\n","import axios from \"axios\";\r\nimport actions from \"./contacts-action\";\r\n\r\n\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  const {\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n  } = actions;\r\n\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst addContact = (name, number) => async (dispatch) => {\r\n  const { addContactRequest, addContactSuccess, addContactError } = actions;\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post(\"/contacts\", contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nconst deleteContact = (contactId) => async (dispatch) => {\r\n  const {\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n  } = actions;\r\n\r\n  dispatch(deleteContactRequest());\r\n\r\n  try {\r\n    await axios.delete(`/contacts/${contactId}`);\r\n    dispatch(deleteContactSuccess(contactId));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  fetchContacts,\r\n};\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getLoading = (state) => state.contacts.loading;\r\n\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nconst getAllContacts = (state) => state.contacts.contacts;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(({ name }) => {\r\n      return name.toLowerCase().includes(filter.toLowerCase());\r\n    });\r\n  }\r\n);\r\n\r\n// const getVisibleContacts = createSelector(\r\n//   [getAllContacts, getFilter],\r\n//   (contacts, filter) =>\r\n//   contacts.filter(\r\n//       ({ name }) =>\r\n//         name.toLowerCase().includes(filter.toLocaleLowerCase()) \r\n//     ),\r\n// );\r\n\r\nexport default { getLoading, getFilter, getVisibleContacts, getAllContacts };\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\r\nimport contactsSelectors from \"../../redux/contacts/contacts-selectors\";\r\nimport shortid from \"shortid\";\r\n\r\nimport s from \"./ContactsForm.module.css\";\r\n\r\nclass ContactsForm extends Component {\r\n  static propTypes = {\r\n    addContact: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n    const { contacts, addContact } = this.props;\r\n\r\n    if (!name) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      contacts.some(\r\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n      )\r\n    ) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    addContact(name, number);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={s.contactsForm}>\r\n        <label htmlFor={shortid.generate()} className={s.formLabel}>\r\n          Name\r\n        </label>\r\n        <input\r\n          className={s.formLabel}\r\n          id={shortid.generate()}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={this.state.name}\r\n          onChange={this.handleChange}\r\n        />\r\n        <label htmlFor={shortid.generate()} className={s.formLabel}>\r\n          Number\r\n        </label>\r\n        <input\r\n          className={s.formLabel}\r\n          id={shortid.generate()}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={this.state.number}\r\n          onChange={this.handleChange}\r\n        />\r\n\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact: contactsOperations.addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);\r\n","import React, { Component } from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport s from \"./ContactList.module.css\";\r\n\r\nclass ContactList extends Component {\r\n  static propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        id: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      })\r\n    ),\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    const { contacts, onDeleteContact } = this.props;\r\n    return (\r\n      <>\r\n        <ul>\r\n          {contacts &&\r\n            contacts.map(({ name, id, number }) => (\r\n              <li key={id} className={s.contactItem}>\r\n                <p>\r\n                  <span>{name}:</span> {number}\r\n                </p>\r\n                <button type=\"button\" onClick={() => onDeleteContact(id)}>\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactList;\r\n","import { connect } from \"react-redux\";\r\nimport ContactList from \"./ContactList\";\r\n// import contactsOperations from \"../../redux/contacts/contacts-operations\";\r\n// import contactsSelectors from \"../../redux/contacts/contacts-selectors\";\r\n\r\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: contactsSelectors.getVisibleContacts(state),\r\n  isLoadingContacts: contactsSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsAction from \"../../redux/contacts/contacts-action\";\r\nimport contactsSelectors from \"../../redux/contacts/contacts-selectors\";\r\n\r\n// import { contactsSelectors, changeFilter } from \"../../redux/contacts\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <>\r\n    <p>Find contacts by name</p>\r\n    <label htmlFor=\"\">\r\n      <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n  </>\r\n);\r\n\r\nFilter.defaultProps = {\r\n  value: \"\",\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) => dispatch(contactsAction.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import \"./App.css\";\nimport ContactsForm from \"./components/ContactsForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\n\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactsForm />\n        <h2>Contacts</h2>\n\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./contacts-action\";\r\n\r\nconst {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  changeFilter,\r\n} = actions;\r\n\r\nconst contacts = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n  loading,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\n\r\nimport contactReducer from \"./contacts/contacts-reducer\";\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\n// import { PersistGate } from \"redux-persist/integration/react\";\nimport store from \"./redux/store\";\nimport \"modern-normalize/modern-normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n   \n      <App />\n\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}