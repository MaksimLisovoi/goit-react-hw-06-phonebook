{"version":3,"sources":["components/ContactList/ContactList.module.css","redux/contacts/contacts-action.js","components/ContactsForm/ContactsForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/ContactsForm/ContactsForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","ContactsForm","state","nameInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","contacts","onSubmit","some","contact","toLowerCase","alert","reset","this","className","s","contactsForm","htmlFor","formLabel","type","onChange","Component","connect","dispatch","contactsAction","getVisibleContacts","allContacts","filter","normalFilter","includes","onDeleteContact","map","contactItem","onClick","target","App","createReducer","actions","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.20010c77.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactItem\":\"ContactList_contactItem__d1sa_\"};","import shortid from \"shortid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContact = createAction(\"contact/add\", (name, number) => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\nconst deleteContact = createAction(\"contact/delete\");\r\nconst changeFilter = createAction(\"contact/changeFilter\");\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport contactsAction from \"../../redux/contacts/contacts-action\";\r\nimport shortid from \"shortid\";\r\n\r\nimport s from \"./ContactsForm.module.css\";\r\n\r\nclass ContactsForm extends Component {\r\n  static propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n    const { contacts, onSubmit } = this.props;\r\n\r\n    if (!name) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      contacts.some(\r\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n      )\r\n    ) {\r\n      alert(`${name} is already in contacts`);\r\n      return;\r\n    }\r\n\r\n    onSubmit(name, number);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={s.contactsForm}>\r\n        <label htmlFor={shortid.generate()} className={s.formLabel}>\r\n          Name\r\n        </label>\r\n        <input\r\n          className={s.formLabel}\r\n          id={shortid.generate()}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={this.state.name}\r\n          onChange={this.handleChange}\r\n        />\r\n        <label htmlFor={shortid.generate()} className={s.formLabel}>\r\n          Number\r\n        </label>\r\n        <input\r\n          className={s.formLabel}\r\n          id={shortid.generate()}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={this.state.number}\r\n          onChange={this.handleChange}\r\n        />\r\n\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: state.contacts.contacts,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (name, number) => dispatch(contactsAction.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport contactsAction from \"../../redux/contacts/contacts-action\";\r\nimport s from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <>\r\n      <ul>\r\n        {contacts.map(({ name, id, number }) => (\r\n          <li key={id} className={s.contactItem}>\r\n            <p>\r\n              <span>{name}:</span> {number}\r\n            </p>\r\n            <button type=\"button\" onClick={() => onDeleteContact(id)}>\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n  const normalFilter = filter.toLowerCase();\r\n\r\n  return allContacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { contacts, filter } }) => ({\r\n  contacts: getVisibleContacts(contacts, filter),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(contactsAction.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport contactsAction from \"../../redux/contacts/contacts-action\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <>\r\n    <p>Find contacts by name</p>\r\n    <label htmlFor=\"\">\r\n      <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n  </>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.contacts.value,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) => dispatch(contactsAction.changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import \"./App.css\";\nimport ContactsForm from \"./components/ContactsForm\";\nimport ContactList from \"./components/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\n\nimport React, { Component } from \"react\";\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactsForm />\n        <h2>Contacts</h2>\n\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./contacts-action\";\r\n\r\nconst contacts = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport contactReducer from \"./contacts/contacts-reducer\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport store from \"./redux/store\";\nimport \"modern-normalize/modern-normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={<h1>Загружаем...</h1>} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsForm\":\"ContactsForm_contactsForm__2IrNF\",\"formLabel\":\"ContactsForm_formLabel__14LEg\"};"],"sourceRoot":""}